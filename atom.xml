<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>a dilettante developer</title>
	<subtitle>Unrefined opinions on engineering &amp; software.</subtitle>
	<link href="https://adilettante.dev/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://adilettante.dev"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-12-25T00:00:00+00:00</updated>
	<id>https://adilettante.dev/atom.xml</id>
	<entry xml:lang="en">
		<title>Hello, World</title>
		<published>2020-12-25T00:00:00+00:00</published>
		<updated>2020-12-25T00:00:00+00:00</updated>
		<link href="https://adilettante.dev/hello-world/" type="text/html"/>
		<id>https://adilettante.dev/hello-world/</id>
		<content type="html">&lt;p&gt;I&#x27;d like to start organizing and publishing my personal notes, with the goal of condensing these thoughts into something more concrete and shareable. The topics I&#x27;m most interested in writing about are, in no particular order:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The Rust programming language&lt;&#x2F;li&gt;
&lt;li&gt;Mechanical Engineering&lt;&#x2F;li&gt;
&lt;li&gt;Computer Aided Design (CAD)&lt;&#x2F;li&gt;
&lt;li&gt;Computer graphics&lt;&#x2F;li&gt;
&lt;li&gt;Data visualization&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is a static site generated by &lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&quot;&gt;zola&lt;&#x2F;a&gt; from markdown files. Here&#x27;s a code snippet using the &lt;em&gt;Fira Code&lt;&#x2F;em&gt; font family, with its nice ligatures:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#f9f9f9;color:#111111;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Look at that fancy LEQ (&amp;lt;=) ligature!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Print text to the console
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fancy_function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Pass in a reference to a bool so the lifetime of the string is elided.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; Because there&amp;#39;s a lifetime associated with the user-specified reference to a bool,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8e908c;&quot;&gt;&#x2F;&#x2F; the lifetime of the string output can be elided as having this same lifetime.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#4271ae;&quot;&gt;fancy_function&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8959a8;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; input {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;Universe&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f07219;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#3e999f;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#839c00;&quot;&gt;&amp;quot;World&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now to test Katex support inline: &lt;script type=&quot;math&#x2F;tex&quot;&gt;\KaTeX&lt;&#x2F;script&gt;. Next let&#x27;s try wrapping the line to make sure the text flows properly. Finally, let&#x27;s try some Katex in block form:&lt;&#x2F;p&gt;
&lt;script type=&quot;math&#x2F;tex;mode=display&quot;&gt;\sum_{\mathclap{1\le i\le j\le n}} x_{ij}&lt;&#x2F;script&gt;
&lt;p&gt;I expect posts will be somewhat sporadic, and the content will probably only be interesting to a select few, or only myself. If you find yourself with common interests, I&#x27;m always happy to chat. Check the &lt;a href=&quot;&#x2F;about&#x2F;&quot;&gt;about&lt;&#x2F;a&gt; page to get in contact!&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
